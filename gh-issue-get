#!/bin/bash

set -euo pipefail

REPO=""
ISSUE=""
GITHUB_TOKEN="${GITHUB_TOKEN:-}"
GITHUB_API_BASE="https://api.github.com"

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

usage() {
    cat << EOF
Usage: gh-issue-get <owner/repo> <issue_number>

Fetch GitHub issue markdown content and copy to clipboard.

Arguments:
    <owner/repo>       Repository in format 'owner/repo' (required)
    <issue_number>     Issue number (required)

Options:
    -h                 Show this help message

Environment Variables:
    GITHUB_TOKEN       Optional GitHub personal access token for authentication
                      Required for private repositories and increased rate limits

Examples:
    gh-issue-get microsoft/vscode 123
    GITHUB_TOKEN=ghp_xxx gh-issue-get myorg/private-repo 456

Dependencies:
    - curl (for API requests)
    - xclip (for clipboard operations)
    - jq (recommended for JSON parsing, falls back to basic parsing)

EOF
}

error_exit() {
    echo -e "${RED}Error: $1${NC}" >&2
    exit 1
}

warn() {
    echo -e "${YELLOW}Warning: $1${NC}" >&2
}

info() {
    echo -e "${GREEN}$1${NC}" >&2
}

check_dependencies() {
    if ! command -v curl >/dev/null 2>&1; then
        error_exit "curl is required but not installed. Please install curl."
    fi
    
    if ! command -v xclip >/dev/null 2>&1; then
        error_exit "xclip is required but not installed. Please install xclip."
    fi
    
    if ! command -v jq >/dev/null 2>&1; then
        warn "jq is not installed. Using fallback JSON parsing (less robust)."
    fi
}

validate_repo() {
    if [[ ! "$REPO" =~ ^[a-zA-Z0-9._-]+/[a-zA-Z0-9._-]+$ ]]; then
        error_exit "Invalid repository format. Expected format: owner/repo"
    fi
}

validate_issue() {
    if [[ ! "$ISSUE" =~ ^[0-9]+$ ]]; then
        error_exit "Invalid issue number. Must be a positive integer."
    fi
}

extract_json_field() {
    local json="$1"
    local field="$2"
    
    if command -v jq >/dev/null 2>&1; then
        echo "$json" | jq -r ".$field // empty"
    else
        echo "$json" | sed -n "s/.*\"$field\":\s*\"\([^\"]*\)\".*/\1/p" | head -1
    fi
}

make_github_request() {
    local url="$1"
    local temp_file
    temp_file=$(mktemp)
    local http_code
    
    local curl_args=(-s -w "%{http_code}" -o "$temp_file")
    
    if [[ -n "$GITHUB_TOKEN" ]]; then
        curl_args+=(-H "Authorization: token $GITHUB_TOKEN")
    fi
    
    curl_args+=(-H "User-Agent: gh-issue-get/1.0")
    
    http_code=$(curl "${curl_args[@]}" "$url" 2>/dev/null || echo "000")
    
    case "$http_code" in
        200)
            cat "$temp_file"
            rm -f "$temp_file"
            return 0
            ;;
        401)
            rm -f "$temp_file"
            if [[ -n "$GITHUB_TOKEN" ]]; then
                error_exit "Authentication failed. Please check your GITHUB_TOKEN."
            else
                error_exit "Authentication required. Please set GITHUB_TOKEN environment variable."
            fi
            ;;
        403)
            rm -f "$temp_file"
            local response
            response=$(cat "$temp_file" 2>/dev/null || echo "")
            if echo "$response" | grep -q "rate limit"; then
                error_exit "GitHub API rate limit exceeded. Please try again later or set GITHUB_TOKEN."
            else
                error_exit "Access forbidden. Repository may be private or you lack permissions."
            fi
            ;;
        404)
            rm -f "$temp_file"
            error_exit "Repository or issue not found. Please check the repository name and issue number."
            ;;
        000)
            rm -f "$temp_file"
            error_exit "Network error. Please check your internet connection."
            ;;
        *)
            local response
            response=$(cat "$temp_file" 2>/dev/null || echo "Unknown error")
            rm -f "$temp_file"
            error_exit "GitHub API request failed with HTTP $http_code: $response"
            ;;
    esac
}

fetch_issue() {
    local url="$GITHUB_API_BASE/repos/$REPO/issues/$ISSUE"
    info "Fetching issue #$ISSUE from $REPO..."
    
    local response
    response=$(make_github_request "$url")
    
    local body
    body=$(extract_json_field "$response" "body")
    
    if [[ -z "$body" || "$body" == "null" ]]; then
        warn "Issue body is empty or could not be extracted."
        echo ""
    else
        if command -v jq >/dev/null 2>&1; then
            echo "$body"
        else
            echo "$body" | sed 's/\\n/\n/g; s/\\t/\t/g; s/\\"/"/g; s/\\\\/\\/g'
        fi
    fi
}

copy_to_clipboard() {
    local content="$1"
    
    if [[ -z "$content" ]]; then
        warn "No content to copy to clipboard."
        return 1
    fi
    
    if echo "$content" | xclip -selection clipboard 2>/dev/null; then
        info "Issue markdown content copied to clipboard!"
        
        local preview
        preview=$(echo "$content" | head -5)
        local line_count
        line_count=$(echo "$content" | wc -l)
        
        echo
        echo "Preview (first 5 lines of $line_count total):"
        echo "─────────────────────────────────────────────"
        echo "$preview"
        if [[ $line_count -gt 5 ]]; then
            echo "..."
        fi
        echo "─────────────────────────────────────────────"
    else
        error_exit "Failed to copy content to clipboard using xclip."
    fi
}

parse_args() {
    for arg in "$@"; do
        if [[ "$arg" == "-h" || "$arg" == "--help" ]]; then
            usage
            exit 0
        fi
    done
    
    if [[ $# -ne 2 ]]; then
        if [[ $# -eq 0 ]]; then
            error_exit "Missing required arguments. Use -h for help."
        elif [[ $# -eq 1 ]]; then
            error_exit "Missing issue number argument. Use -h for help."
        else
            error_exit "Too many arguments. Expected: <owner/repo> <issue_number>. Use -h for help."
        fi
    fi
    
    REPO="$1"
    ISSUE="$2"
}

main() {
    parse_args "$@"
    check_dependencies
    validate_repo
    validate_issue
    
    local issue_content
    issue_content=$(fetch_issue)
    
    copy_to_clipboard "$issue_content"
}

main "$@"